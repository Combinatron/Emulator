{-# LANGUAGE TypeSynonymInstances, FlexibleInstances, GeneralizedNewtypeDeriving #-}
module Test.Combinatron.QuickCheck where

import Prelude hiding (Word)
import Test.QuickCheck
import Combinatron.Types
import qualified Data.Vector as V
import Data.List (partition)

-- QuickCheck Instances
instance Arbitrary Word where
    arbitrary = do
        i <- resize 7 (arbitrarySizedNatural :: Gen Int)
        case i of
            0 -> return B
            1 -> return C
            2 -> return K
            3 -> return W
            4 -> return NullWord
            -- Pointers must be greater than 0
            -- No M word is generated here because those are only generated by operation of the machine
            5 -> n . succ <$> arbitrarySizedNatural
            6 -> g . succ <$> arbitrarySizedNatural
            7 -> p . succ <$> arbitrarySizedNatural
            _ -> error "Generated index higher than 7! This should not happen!"

instance Arbitrary Sentence where
    arbitrary = do
        (x, y, z) <- (,,) <$> arbitrary <*> arbitrary <*> arbitrary
        let (nulls, notnulls) = partition isNull [x, y, z]
            (x':y':z':[]) = notnulls ++ nulls
        return $ Sentence x' y' z'

instance Arbitrary SentenceIndex where
    arbitrary = V.fromList <$> listOf arbitrary

-- Generate arbitrary machines by generating arbitrary programs
instance Arbitrary Machine where
    arbitrary = do
        program <- arbitrary :: Gen SentenceIndex
        return $ initialize program

newtype NonEmptySentenceIndex = NonEmptySentenceIndex SentenceIndex
    deriving (Show)

instance Arbitrary NonEmptySentenceIndex where
    arbitrary = NonEmptySentenceIndex . V.fromList <$> listOf1 arbitrary
